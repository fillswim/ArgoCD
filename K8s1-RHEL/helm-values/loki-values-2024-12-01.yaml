deploymentMode: Distributed

loki:
  # Should authentication be enabled
  auth_enabled: false
  # -- Storage config. Providing this will automatically populate all necessary storage configs in the templated config.
  storage:
    # Loki requires a bucket for chunks and the ruler. GEL requires a third bucket for the admin API.
    # Please provide these values if you are using object storage.
    bucketNames:
      chunks: loki-chunks
      ruler: loki-ruler
      admin: loki-admin
    type: s3
    s3:

      ## MinIO S3 Cluster Standalone
      # s3: http://api.minio.fillswim.local
      # endpoint: http://api.minio.fillswim.local

      ## MinIO S3 Cluster K8s
      s3: http://api.minio-example.fillswim.local
      endpoint: http://api.minio-example.fillswim.local

      bucketNames:
        chunks: loki-chunks
        ruler: loki-ruler

      accessKeyId: "${MINIO_USER}"
      secretAccessKey: "${MINIO_PASSWORD}"
      s3ForcePathStyle: true
      insecure: true
      http_config: {}
      # -- Check https://grafana.com/docs/loki/latest/configure/#s3_storage_config for more info on how to provide a backoff_config
      backoff_config: {}
      disable_dualstack: false

  useTestSchema: false

  schemaConfig:
    configs:
      - from: "2024-04-01"
        store: tsdb
        object_store: s3
        schema: v13
        index:
          prefix: loki_index_
          period: 24h

  ingester:
    chunk_encoding: snappy
  querier:
    # Default is 4, if you have enough memory and CPU you can increase, reduce if OOMing
    max_concurrent: 4
  pattern_ingester:
    enabled: true
  limits_config:
    allow_structured_metadata: true
    volume_enabled: true
    retention_period: 672h
  compactor:
    retention_enabled: true
    delete_request_store: s3

# Ingester
ingester:
  replicas: 3 # To ensure data durability with replication
  extraArgs:
    - -config.expand-env=true
  extraEnv:
    - name: MINIO_USER
      valueFrom:
        secretKeyRef:
          name: minio-for-loki-secret
          key: rootUser
    - name: MINIO_PASSWORD
      valueFrom:
        secretKeyRef:
          name: minio-for-loki-secret
          key: rootPassword

querier:
  replicas: 3 # Improve query performance via parallelism
  maxUnavailable: 2
queryFrontend:
  replicas: 2
  maxUnavailable: 1
queryScheduler:
  replicas: 2
distributor:
  replicas: 3
  maxUnavailable: 2

# Compactor
compactor:
  replicas: 1
  extraArgs:
    - -config.expand-env=true
  extraEnv:
    - name: MINIO_USER
      valueFrom:
        secretKeyRef:
          name: minio-for-loki-secret
          key: rootUser
    - name: MINIO_PASSWORD
      valueFrom:
        secretKeyRef:
          name: minio-for-loki-secret
          key: rootPassword

  # extraEnvFrom:
  #   - secretRef:
  #       name: minio-for-loki-secret

indexGateway:
  replicas: 2
  maxUnavailable: 1

bloomPlanner:
  replicas: 0
bloomBuilder:
  replicas: 0
bloomGateway:
  replicas: 0

backend:
  replicas: 0
read:
  replicas: 0
write:
  replicas: 0

singleBinary:
  replicas: 0


# Enable minio for storage
minio:
  enabled: false

# -- Ingress configuration Use either this ingress or the gateway, but not both at once.
# If you enable this, make sure to disable the gateway.
# You'll need to supply authn configuration for your ingress controller.
ingress:
  enabled: true
  ingressClassName: "nginx"
  # -- Hosts configuration for the ingress, passed through the `tpl` function to allow templating
  hosts:
    - loki.fillswim.local
